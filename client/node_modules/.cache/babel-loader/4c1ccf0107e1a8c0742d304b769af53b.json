{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react'; // const passwordValidator = (value) => {\n//     //need to set state here, so I know which error it is\n//     let validLength  = value.trim().length >= 8\n//     let hasNumber =  /\\d/.test(value)\n//     let upperCase =  value.toLowerCase() !== value\n//     let lowerCase =  value.toUpperCase() !== value\n//     let specialChar =  /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(value)\n//     if (validLength && hasNumber && upperCase && lowerCase && specialChar) {\n//         return true\n//     } else { \n//         return false\n//     }\n// }\n//restore this and make a new one for passwords\n\nconst useInput = passwordValidator => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  const [touched, setTouched] = useState(false); //might want to set state here\n\n  const validValue = passwordValidator(inputValue); //has error needs to be a function\n\n  const hasError = !validValue && touched; //need another function that checks for errors, and returns when it finds one\n\n  const valueChangeHandler = event => {\n    setInputValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    console.log('blur');\n    setTouched(true);\n  };\n\n  return {\n    value: inputValue,\n    valid: validValue,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler //return states?\n\n  };\n};\n\n_s(useInput, \"2RnJx/Lu9LpQN69ARmztQ/PM8BY=\");\n\nexport default useInput;","map":{"version":3,"sources":["/app/src/hooks/useInput.js"],"names":["useState","useInput","passwordValidator","inputValue","setInputValue","touched","setTouched","validValue","hasError","valueChangeHandler","event","target","value","inputBlurHandler","console","log","valid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;;AACA,MAAMC,QAAQ,GAAIC,iBAAD,IAAuB;AAAA;;AACpC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC,CAFoC,CAIpC;;AACA,QAAMO,UAAU,GAAGL,iBAAiB,CAACC,UAAD,CAApC,CALoC,CAMpC;;AACA,QAAMK,QAAQ,GAAG,CAACD,UAAD,IAAeF,OAAhC,CAPoC,CASpC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,aAAa,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCI,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAT,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAHD;;AAKA,SAAO;AACHM,IAAAA,KAAK,EAAET,UADJ;AAEHa,IAAAA,KAAK,EAAET,UAFJ;AAGHC,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHI,IAAAA,gBALG,CAMH;;AANG,GAAP;AAQH,CA5BD;;GAAMZ,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react'\n\n  // const passwordValidator = (value) => {\n    //     //need to set state here, so I know which error it is\n    //     let validLength  = value.trim().length >= 8\n    //     let hasNumber =  /\\d/.test(value)\n    //     let upperCase =  value.toLowerCase() !== value\n    //     let lowerCase =  value.toUpperCase() !== value\n    //     let specialChar =  /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(value)\n    //     if (validLength && hasNumber && upperCase && lowerCase && specialChar) {\n    //         return true\n    //     } else { \n    //         return false\n    //     }\n    // }\n\n//restore this and make a new one for passwords\nconst useInput = (passwordValidator) => {\n    const [inputValue, setInputValue] = useState('')\n    const [touched, setTouched] = useState(false)\n  \n    //might want to set state here\n    const validValue = passwordValidator(inputValue)\n    //has error needs to be a function\n    const hasError = !validValue && touched \n\n    //need another function that checks for errors, and returns when it finds one\n\n    const valueChangeHandler = (event) => {\n        setInputValue(event.target.value)\n    }\n\n    const inputBlurHandler = (event) => {\n        console.log('blur')\n        setTouched(true)\n    }\n\n    return {\n        value: inputValue,\n        valid: validValue,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler\n        //return states?\n    }\n}\nexport default useInput"]},"metadata":{},"sourceType":"module"}